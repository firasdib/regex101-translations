{
  "Copied!": "Gekopieerd!",
  "Press {1} to copy": "Toets {1} om te kopiëren",
  "Close": "Sluit",
  "My history": "Mijn geschiedenis",
  "My Regular Expressions": "Mijn Reguliere Expressies",
  "My Favorites": "Mijn Favorieten",
  "My Library Entries": "Mijn Bibliotheek",
  "Account Page": "Account Pagina",
  "Categories": "Categorieën",
  "Your have not created anything yourself yet.": "Je hebt nog niets zelf gemaakt.",
  "You have not added anything to your favorites yet.": "Je hebt nog niets toegevoegd aan jou favorieten.",
  "My History": "Mijn Geschiedenis",
  "Your history is empty.": "Jou geschiedenis is leeg.",
  "You have not submitted anything to the library yet.": "Je hebt nog niets toegevoegd aan de bibliotheek.",
  "Remove from favorites": "Verwijder van favorieten",
  "Add to favorites": "Voeg toe aan favorieten",
  "Edit title and tags": "Pas titel en labels aan",
  "Make regex tree public": "Maak regex tree publiek",
  "Make regex tree private": "Maak regex tree prive",
  "Delete Regex Tree": "Verwijder Regex Tree",
  "Your tag filtration returned no results.": "Jou gefilterde labels hebben geen resultaten teruggegeven.",
  "There was an error while fetching your account data. Please try again later.": "Er is een error opgetreden tijdens het ophalen van je account gegevens. Probeer het later opnieuw.",
  "Code Generator": "Code Generator",
  "Language": "Taal",
  "Generated Code": "Gegenereerde Code",
  "Please keep in mind that these code samples are automatically generated and are not guaranteed to work. If you find any syntax errors, feel free to submit a bug report.": "Houd in gedachte dat deze code samples automatisch gegenereerd zijn en kunnen fouten bevatten. Als er syntax errors optreden, maak alsjeblieft een bug report.",
  "For a full regex reference for {1}, please visit:": "Voor een volledige regex referentie voor {1}, bekijk:",
  "Account": "Account",
  "Follow me on twitter!": "Volg mij op twitter!",
  "Donate": "Doneer",
  "Like RegEx101? Support it by donating!": "Waardeer jij RegEx101? Steun ons door te doneren!",
  "Contact": "Contact",
  "Send me a personal email": "Stuur mij een persoonlijke email",
  "Bug Reports & Feedback": "Bug Reports & Feedback",
  "Bugs or suggestions go here": "Bugs of suggesties gaan hier",
  "Settings": "Instellingen",
  "Show Sidebar": "Toon Sidebar",
  "Regex Editor": "Regex Editor",
  "Regex Library": "Regex Bibliotheek",
  "Live Help (IRC, opens new window)": "Live Help (IRC, opent in een nieuw venster)",
  "Consider a donation": "Overweeg om te doneren",
  "Please wait while the app is loading...": "Even geduld aub terwijl de app aan het laden is...",
  "Write": "Schrijf",
  "Preview": "Preview",
  "Styling with Markdown is supported": "Styling met Markdown is ondersteunt",
  "Nothing to preview": "Niets om te zien",
  "Add header": "Voeg header toe",
  "Add bold text": "Voeg dikgedrukt teksts toe",
  "Add italic text": "Voeg cursief tekst toe",
  "Insert quote": "Voeg een citaat toe",
  "Insert code snippet": "Voeg code snippet toe",
  "Insert link": "Voeg link toe",
  "Add bulleted list": "Voeg bulleted list toe",
  "Add numbered list": "Voeg numbered list toe",
  "Debug data": "Debug data",
  "Load more": "Meer laden",
  "Backtrack": "Backtrack",
  "Regex Debugger": "Regex Debugger",
  "Please hold while your expression is being debugged...": "Even geduld aub terwijl we jou regex debuggen...",
  "The regex debugger was unable to debug your pattern due to an error.": "De regex debugger was niet in staat om jou regex te debuggen door een error.",
  "The regex debugger returned no data for the input you provided.": "De regex debugger heeft geen data teruggegeven voor jou opgegeven invoer.",
  "Match": "Match",
  "Match found in {1} step(s)": "Match gevonden in {1} stap(pen)",
  "Match failed in {1} step(s)": "Match niet gevonden in {1} stap(pen)",
  "Match halted after {1} step(s)": "Match gestopt na {1} stap(pen)",
  "You have made changes since you last saved, leaving the website will result in a permanent loss of the data.": "Je hebt veranderingen gemaakt sinds jou laatste opslag, verlaten van de website wil resulteren in een permanente verlies van de data.",
  "incomplete group structure": "incomplete groep structuur",
  "the condition is invalid (may be referencing a non-existent subpattern or group)": "De conditie is niet geldig (may be referencing a non-existent subpattern or group)",
  "a subpattern name must be unique": "een subpattern naam moet uniek zijn",
  "a subpattern name must be alpha numeric and may not begin with a digit": "een subpattern naam moet alfanumeriek zijn en mag niet beginnen met een nummer.",
  "there are too many alternatives within the parent structure": "er zijn teveel alternatieven in de parent structure",
  "the verb is unknown/invalid": "Dit werkwoord is niet geldig",
  "this verb must be placed at the start of the regex": "Dit werkwoord moet aan het begin van de regex geplaatst worden",
  "this token references a non-existent or invalid subpattern": "Deze token references een niet-bestaande of incorrecte subpattern",
  "the preceding token is not quantifiable": "De voorgaande token is niet quantifiable",
  "the quantifier range is out of order": "The quantifier range is out of order",
  "character class missing closing bracket": "karakter klasse mist een sluitende bracket",
  "character range is out of order": "character range is out of order",
  "the range is invalid because the rightmost token is not rangeable": "the range is invalid because the rightmost token is not rangeable",
  "a posix character class may only appear inside a character class": "a POSIX character class may only appear inside a character class",
  "the posix class is unknown/invalid": "the POSIX class is unknown/invalid",
  "this token is not supported in the selected flavor": "this token is not supported in the selected flavour",
  "pattern may not end with a trailing backslash": "pattern may not end with a trailing backslash",
  "an unescaped delimiter must be escaped with a \\": "an unescaped delimiter must be escaped with a \\",
  "the sequence is incomplete": "the sequence is incomplete",
  "the character offset is too large, reduce it to 4 hexadecimal characters or enable unicode (/u)": "the character offset is too large, reduce it to 4 hexadecimal characters or enable Unicode (/u)",
  "surrogates are disallowed": "surrogates are disallowed",
  "the value specified is too large": "the value specified is too large",
  "an end quote token encountered before a start quote token": "an end quote token encountered before a start quote token",
  "an alternator at this position effectively truncates the group, rendering any other tokens beyond this point useless": "an alternator at this position effectively truncates the group, rendering any other tokens beyond this point useless",
  "an alternator at this position effectively truncates the entire pattern, rendering any other tokens beyond this point useless": "an alternator at this position effectively truncates the entire pattern, rendering any other tokens beyond this point useless",
  "the token is incomplete": "the token is incomplete",
  "this script is unknown/invalid": "this script is unknown/invalid",
  "invalid control character": "invalid control character",
  "this token has no special meaning and has thus been rendered erroneous": "this token has no special meaning and has thus been rendered erroneous",
  "a named subpattern may not have a name which length exceeds 32 characters": "a named subpattern may not have a name which length exceeds 32 characters",
  "a lookbehind assertion has to be fixed width": "a lookbehind assertion has to be fixed width",
  "this token can not be used in a lookbehind as it makes it non-fixed width": "this token can not be used in a lookbehind as it makes it non-fixed width",
  "a quantifier inside a lookbehind makes it non-fixed width": "a quantifier inside a lookbehind makes it non-fixed width",
  "regex101 only supports inline modifiers to be placed at the start of the regex for python (which is also best practice)": "regex101 only supports inline modifiers to be placed at the start of the regex for python (which is also best practice)",
  "you can not set both the `a` and `u` flag simultaneously": "you can not set both the `a` and `u` flag simultaneously",
  "you can not create a range with a shorthand escape sequences": "you can not create a range with a shorthand escape sequences",
  "the escape sequence to match backspace is not supported in the selected flavor": "the escape sequence to match backspace is not supported in the selected flavour",
  "Character class": "Character class",
  "{1} Alternative": "{1} Alternative",
  "{1}, matches any position": "{1}, matches any position",
  "An empty alternative effectively makes this group optional which suggests the alternative is completely redundant": "An empty alternative effectively makes this group optional which suggests the alternative is completely redundant",
  "All the errors detected are listed below, from left to right, as they appear in the pattern.": "All the errors detected are listed below, from left to right, as they appear in the pattern.",
  "anonymous": "anonymous",
  "Description": "Description",
  "no description available": "no description available",
  "submitted by": "submitted by",
  "Open regex in editor": "Open regex in editor",
  "Library Entry": "Library Entry",
  "There was a problem when trying to fetch the details for this entry. Please try again later.": "There was a problem when trying to fetch the details for this entry. Please try again later.",
  "Submitted by": "Submitted by",
  "Library entries": "Library entries",
  "There was a problem trying to fetch the library data. Please try again later.": "There was a problem trying to fetch the library data. Please try again later.",
  "There seems to be nothing here!": "There seems to be nothing here!",
  "{1} upvotes, {2} downvotes ({3}% like it)": "{1} upvotes, {2} downvotes ({3}% like it)",
  "Most recent": "Most recent",
  "Most points": "Most points",
  "Least points": "Least points",
  "View Explanation": "View Explanation",
  "Explanation": "Explanation",
  "View Match Information": "View Match Information",
  "Match Information": "Match Information",
  "View Regex Quick Reference": "View Regex Quick Reference",
  "Quick Reference": "Quick Reference",
  "Application Settings": "Application Settings",
  "General": "General",
  "Include non-participating groups in match result": "Include non-participating groups in match result",
  "This setting determines whether groups in your regex which did not match anything in the subject string should be included in the results or not.": "This setting determines whether groups in your regex which did not match anything in the subject string should be included in the results or not.",
  "Max Execution Time": "Max Execution Time",
  "This setting affects how long the matcher will try to match your regex before it decides to give up.": "This setting affects how long the matcher will try to match your regex before it decides to give up.",
  "Theme": "Theme",
  "Style": "Style",
  "Light": "Light",
  "Dark": "Dark",
  "This setting adjusts the site wide theme.": "This setting adjusts the site wide theme.",
  "Editor": "Editor",
  "Highlight Syntax": "Highlight Syntax",
  "Enable or disable the syntax highlighting of your regular expression in the editor.": "Enable or disable the syntax highlighting of your regular expression in the editor.",
  "Auto-complete Brackets": "Auto-complete Brackets",
  "Wrap Long Lines": "Wrap Long Lines",
  "Show Line Numbers": "Show Line Numbers",
  "Show tooltips": "Show tooltips",
  "Show informative and helpful tooltips when hovering tokens in the regex editor": "Show informative and helpful tooltips when hovering tokens in the regex editor",
  "Loading...": "Loading...",
  "Tags": "Tags",
  "You have no tags yet, add some and organize your entries!": "You have no tags yet, add some and organize your entries!",
  "'{0}' found at index {1}": "'{0}' found at index {1}",
  "'{0}' found at index {1}.": "'{0}' found at index {1}.",
  "The substituted value will be contained in the result variable": "The substituted value will be contained in the result variable",
  "Substitution result": "Substitution result",
  "Full match": "Full match",
  "Group": "Group",
  "The result can be accessed through the `m`-variable.": "The result can be accessed through the `m`-variable.",
  "The result of the substitution is": "The result of the substitution is",
  "Whole match is {1} and its start/end positions can be obtained via {2} and {3}": "Whole match is {1} and its start/end positions can be obtained via {2} and {3}",
  "Capture Group {1} is {2} and its start/end positions can be obtained via {3} and {4}": "Capture Group {1} is {2} and its start/end positions can be obtained via {3} and {4}",
  "Capture Group {1} is {2} ... and so on": "Capture Group {1} is {2} ... and so on",
  "{1} and {2} are also available with the use of '{3}'": "{1} and {2} are also available with the use of '{3}'",
  "Named capture groups can be called via {1}": "Named capture groups can be called via {1}",
  "You can manually specify the number of replacements by changing the 4th argument": "You can manually specify the number of replacements by changing the 4th argument",
  "Match {1} was found at {2}": "Match {1} was found at {2}",
  "Match was found at {1}": "Match was found at {1}",
  "Group {1} found at {2}": "Group {1} found at {2}",
  "Note: for Python 2.7 compatibility, use ur{1}{2} to prefix the regex and u\"\" to prefix test string and substitution.": "Note: for Python 2.7 compatibility, use ur{1}{2} to prefix the regex and u\"\" to prefix test string and substitution.",
  "Print the result of the substitution": "Print the result of the substitution",
  "Print the match result": "Print the match result",
  "include `regex = \"0.1\"` in your Cargo.toml dependencies section": "include `regex = \"0.1\"` in your Cargo.toml dependencies section",
  "in your main.rs or lib.rs": "in your main.rs or lib.rs",
  "result will be a String with the substituted value": "result will be a String with the substituted value",
  "result will be an iterator over tuples containing the start and end indices for each match in the string": "result will be an iterator over tuples containing the start and end indices for each match in the string",
  "result will be a tuple containing the start and end indices for the first match in the string": "result will be a tuple containing the start and end indices for the first match in the string",
  "Order By": "Order By",
  "Filter by Flavor": "Filter by Flavour",
  "Save & Share": "Save & Share",
  "Update Regex": "Update Regex",
  "Save Regex": "Save Regex",
  "Fork Regex": "Fork Regex",
  "Upload to Library": "Upload to Library",
  "Unfavorite Regex": "Unfavourite Regex",
  "Favorite Regex": "Favourite Regex",
  "Flavor": "Flavour",
  "Tools": "Tools",
  "Format Regex": "Format Regex",
  "Sorry!": "Sorry!",
  "The regex formatter is only able to format the parts of the regex affected by the x-flag (ignore whitespace).": "The regex formatter is only able to format the parts of the regex affected by the x-flag (ignore whitespace).",
  "This is because it would otherwise break the functionality of the regular expression.": "This is because it would otherwise break the functionality of the regular expression.",
  "You are seeing this message because your expression is either already formatted or nothing else could be done to it without breaking functionality.": "You are seeing this message because your expression is either already formatted or nothing else could be done to it without breaking functionality.",
  "Sign In": "Sign In",
  "View account": "View account",
  "Sign out": "Sign out",
  "Delimiters": "Delimiters",
  "Regex Flags": "Regex Flags",
  "Headers": "Headers",
  "Unable to fetch versions": "Unable to fetch versions",
  "Version {1}": "Version {1}",
  "Regex Versions": "Regex Versions",
  "Edit account entry": "Edit account entry",
  "Edit title": "Edit title",
  "Insert a personal title": "Insert a personal title",
  "Add tag": "Add tag",
  "Any word can be used as a tag": "Any word can be used as a tag",
  "Save": "Save",
  "Close": "Close",
  "Export matches": "Export matches",
  "Export method": "Export method",
  "Plain Text": "Plain Text",
  "Data": "Data",
  "Fork Regular Expression": "Fork Regular Expression",
  "Update Regular Expression": "Update Regular Expression",
  "Save Regular Expression": "Save Regular Expression",
  "There was an error trying to save your regex. Please try again later.": "There was an error trying to save your regex. Please try again later.",
  "Please wait while your request is being processed.": "Please wait while your request is being processed.",
  "Link to regular expression": "Link to regular expression",
  "Your regex has been permanently saved and may be accessed with this link by anybody you give it to. It will not be deleted unless you decide to delete it.": "Your regex has been permanently saved and may be accessed with this link by anybody you give it to. It will not be deleted unless you decide to delete it.",
  "Delete link": "Delete link",
  "This link will only be presented to you once! Save it if you want to be able to delete your regex in the future.": "This link will only be presented to you once! Save it if you want to be able to delete your regex in the future.",
  "Google": "Google",
  "Github": "Github",
  "Twitter": "Twitter",
  "Sign in with one of the providers below": "Sign in with one of the providers below",
  "Signing in allows you to add favorites as well as manage, make private, and delete your expressions.": "Signing in allows you to add favourites as well as manage, make private, and delete your expressions.",
  "Beware that this will refresh the page and any unsaved progress will be lost!": "Beware that this will refresh the page and any unsaved progress will be lost!",
  "Submit to Regex Library": "Submit to Regex Library",
  "Submit": "Submit",
  "Cancel": "Cancel",
  "Title": "Title",
  "Title of regular expression": "Title of regular expression",
  "Description of regular expression": "Description of regular expression",
  "Author": "Author",
  "Name or other identifier of the author": "Name or other identifier of the author",
  "There was a problem while trying to submit your regex to the library. Please try again later.": "There was a problem while trying to submit your regex to the library. Please try again later.",
  "Your entry has successfully been submitted to the library": "Your entry has successfully been submitted to the library",
  "Your workspace has been forked into a separate entry that only you can modify, which you can find here": "Your workspace has been forked into a separate entry that only you can modify, which you can find here",
  "You will find a link to your library entry here:": "You will find a link to your library entry here:",
  "There is no need to save these urls as they are stored on your account and can be found on the account page. You may at any time delete or modify your library entry from there.": "There is no need to save these URLs as they are stored on your account and can be found on the account page. You may at any time delete or modify your library entry from there.",
  "Submitting entry, please wait.": "Submitting entry, please wait.",
  "Pattern Error": "Pattern Error",
  "Timeout": "Timeout",
  "Catastrophic Backtracking": "Catastrophic Backtracking",
  "Engine Error": "Engine Error",
  "Processing...": "Processing...",
  "No Match": "No Match",
  "{1} matches": "{1} matches",
  "{1} match": "{1} match",
  "{1} steps": "{1} steps",
  "{1} step": "{1} step",
  "Change delimiter": "Change delimiter",
  "Set Regex Options": "Set Regex Options",
  "Regular Expression": "Regular Expression",
  "Select Regex Version": "Select Regex Version",
  "insert your regular expression here": "insert your regular expression here",
  "insert your replacement value here": "insert your replacement value here",
  "Substitution": "Substitution",
  "insert your test string here": "insert your test string here",
  "Test String": "Test String",
  "Switch to Unit Tests {1}": "Switch to Unit Tests {1}",
  "Match {1}": "Match {1}",
  "group {1}: {2}": "group {1}: {2}",
  "pos: {1}-{2}": "pos: {1}-{2}",
  "does match": "does match",
  "does not match": "does not match",
  "starts with": "starts with",
  "ends with": "ends with",
  "contains": "contains",
  "equals": "equals",
  "regex": "regex",
  "matched result": "matched result",
  "capture group {1}": "capture group {1}",
  "There are no unit tests yet; add some!": "There are no unit tests yet; add some!",
  "Unspecified unit test": "Unspecified unit test",
  "insert test description": "insert test description",
  "insert test string": "insert test string",
  "assert that": "assert that",
  "insert comparison string": "insert comparison string",
  "Add test": "Add test",
  "Edit test": "Edit test",
  "given the string": "given the string",
  "Expected regex to match, but did not.": "Expected regex to match, but did not.",
  "Expected regex to not match, but did.": "Expected regex to not match, but did.",
  "The regex did not match the subject string.": "The regex did not match the subject string.",
  "The group {1} no longer exists in the pattern": "The group {1} no longer exists in the pattern",
  "full match": "full match",
  "Expected group {1} to contain `{2}` but did not": "Expected group {1} to contain `{2}` but did not",
  "Expected group {1} to equal `{2}` but was instead `{3}`": "Expected group {1} to equal `{2}` but was instead `{3}`",
  "Expected group {1} to start with `{2}` but was instead `{3}`": "Expected group {1} to start with `{2}` but was instead `{3}`",
  "Expected group {1} to end with `{2}` but was instead `{3}`": "Expected group {1} to end with `{2}` but was instead `{3}`",
  "Run tests": "Run tests",
  "Unit Tests": "Unit Tests",
  "Switch to Test Area": "Switch to Test Area",
  "If condition is met, match the following regex": "If condition is met, match the following regex",
  "Else match the following regex": "Else match the following regex",
  "Alternative": "Alternative",
  "matches the same text as most recently matched by the entire pattern": "matches the same text as most recently matched by the entire pattern",
  "matches the same text as most recently matched by the {1} capturing group": "matches the same text as most recently matched by the {1} capturing group",
  "matches the same text as most recently matched by the capturing group named {1}": "matches the same text as most recently matched by the capturing group named {1}",
  "matches a backspace character": "matches a backspace character",
  "Custom regex101 property that converts all subsequent tokens to their {1} equivalence until `\\E` is encountered": "Custom regex101 property that converts all subsequent tokens to their {1} equivalence until `\\E` is encountered",
  "uppercase": "upper case",
  "lowercase": "lower case",
  "Match a single character not present in the list below": "Match a single character not present in the list below",
  "Match a single character present in the list below": "Match a single character present in the list below",
  "case insensitive": "case insensitive",
  "case sensitive": "case sensitive",
  "a single character in the range between {1} {2} and {3} {4} ({5})": "a single character in the range between {1} {2} and {3} {4} ({5})",
  "Comment": "Comment",
  "checks if the whole pattern matches": "checks if the whole pattern matches",
  "checks if the subroutine {1} matches": "checks if the subroutine {1} matches",
  "checks if the {1} subroutine matches": "checks if the {1} subroutine matches",
  "checks if the {1} capturing group matched when it was last attempted": "checks if the {1} capturing group matched when it was last attempted",
  "checks if the named group {1} matched when it was last attempted": "checks if the named group {1} matched when it was last attempted",
  "Evaluate the condition below and proceed accordingly": "Evaluate the condition below and proceed accordingly",
  "matches the control sequence {1} ({2})": "matches the control sequence {1} ({2})",
  "Don't return after first match": "Don't return after first match",
  "Case insensitive match": "Case insensitive match",
  "^ and $ match start/end of line": "^ and $ match start/end of line",
  "Dot matches newline": "Dot matches newline",
  "Ignore whitespace": "Ignore whitespace",
  "Allow duplicate subpattern names": "Allow duplicate subpattern names",
  "Match with full unicode": "Match with full Unicode",
  "Make quantifiers lazy": "Make quantifiers lazy",
  "Disallow meaningless escapes": "Disallow meaningless escapes",
  "Anchor to start of pattern": "Anchor to start of pattern",
  "Anchor to end of pattern": "Anchor to end of pattern",
  "Make escape sequences perform ASCII-only matching": "Make escape sequences perform ASCII-only matching",
  "{1}. All matches (don't return after first match)": "{1}. All matches (don't return after first match)",
  "{1}. Case insensitive match (ignores case of {2})": "{1}. Case insensitive match (ignores case of {2})",
  "{1}. Case sensitive match": "{1}. Case sensitive match",
  "Disallow duplicate subpattern names": "Disallow duplicate subpattern names",
  "{1}. Dot matches newline characters": "{1}. Dot matches newline characters",
  "{1}. A dot won't match {2}": "{1}. A dot won't match {2}",
  "{1}. Causes {2} and {3} to match the begin/end of each line (not only begin/end of string)": "{1}. Causes {2} and {3} to match the begin/end of each line (not only begin/end of string)",
  "{1}. Causes {2} and {3} to match begin/end of string": "{1}. Causes {2} and {3} to match begin/end of string",
  "{1}. Spaces and text after a {2} in the pattern are ignored": "{1}. Spaces and text after a {2} in the pattern are ignored",
  "{1}. Whitespaces and {2} in the pattern are treated literally": "{1}. Whitespaces and {2} in the pattern are treated literally",
  "{1}. A {2} followed by a letter with no special meaning is faulted": "{1}. A {2} followed by a letter with no special meaning is faulted",
  "{1}. Pattern is forced to {2}": "{1}. Pattern is forced to {2}",
  "{1}. The match becomes lazy by default. Now a {2} following a quantifier makes it greedy": "{1}. The match becomes lazy by default. Now a {2} following a quantifier makes it greedy",
  "{1}. The match becomes greedy by default": "{1}. The match becomes greedy by default",
  "{1}. Pattern strings are treated as {2}. Also causes escape sequences to match unicode characters": "{1}. Pattern strings are treated as {2}. Also causes escape sequences to match Unicode characters",
  "{1}. Force the escape sequences {2}, {3}, {4}, {5}, {6}, {7}, {8} and {9} to perform ASCII-only matching instead of full Unicode matching": "{1}. Force the escape sequences {2}, {3}, {4}, {5}, {6}, {7}, {8} and {9} to perform ASCII-only matching instead of full Unicode matching",
  "{1} modifier:": "{1} modifier:",
  "Global pattern flags": "Global pattern flags",
  "Empty modifier group - very useless.": "Empty modifier group - very useless.",
  "match the remainder of the pattern with the following effective flags:": "match the remainder of the pattern with the following effective flags:",
  "end of quoted literals (meaningless)": "end of quoted literals (meaningless)",
  "This token does nothing without a corresponding open quote tag (\\Q). If you meant to match a literal `E`, remove the backslash": "This token does nothing without a corresponding open quote tag (\\Q). If you meant to match a literal `E`, remove the backslash",
  "match any word character in any script": "match any word character in any script",
  "matches any word character": "matches any word character",
  "match any non-word character in any script": "match any non-word character in any script",
  "matches any non-word character": "matches any non-word character",
  "matches a digit zero through nine in any script except ideographic scripts": "matches a digit zero through nine in any script except ideographic scripts",
  "matches a digit": "matches a digit",
  "matches any non-numeric character in any script": "matches any non-numeric character in any script",
  "matches any character that's not a digit": "matches any character that's not a digit",
  "matches any kind of invisible character": "matches any kind of invisible character",
  "matches any white space character": "matches any white space character",
  "matches any kind of visible character": "matches any kind of visible character",
  "matches any non-white space character": "matches any non-white space character",
  "matches any horizontal whitespace character (equal to {1})": "matches any horizontal whitespace character (equal to {1})",
  "matches any character that's not a horizontal whitespace character": "matches any character that's not a horizontal whitespace character",
  "matches a vertical tab character": "matches a vertical tab character",
  "matches any vertical whitespace character": "matches any vertical whitespace character",
  "matches any character that's not a vertical whitespace character": "matches any character that's not a vertical whitespace character",
  "matches any non-newline character": "matches any non-newline character",
  "matches any Unicode newline sequence; can be modified using verbs": "matches any Unicode newline sequence; can be modified using verbs",
  "matches one data unit, even in UTF mode (best avoided)": "matches one data unit, even in UTF mode (best avoided)",
  "matches any number of Unicode characters that form an extended Unicode sequence": "matches any number of Unicode characters that form an extended Unicode sequence",
  "matches a tab character": "matches a tab character",
  "matches a carriage return": "matches a carriage return",
  "matches a line-feed (newline) character": "matches a line-feed (newline) character",
  "matches a form-feed character": "matches a form-feed character",
  "matches the bell character": "matches the bell character",
  "matches esc": "matches esc",
  "assert position at a word boundary": "assert position at a word boundary",
  "assert position where {2} does not match": "assert position where {2} does not match",
  "asserts position at start of the string": "asserts position at start of the string",
  "asserts position at the absolute end of the string": "asserts position at the absolute end of the string",
  "asserts position at end of the string": "asserts position at end of the string",
  "asserts position at the end of the previous match or the start of the string for the first match": "asserts position at the end of the previous match or the start of the string for the first match",
  "resets the starting point of the reported match. Any previously consumed characters are no longer included in the final match": "resets the starting point of the reported match. Any previously consumed characters are no longer included in the final match",
  "(except newline)": "(except newline)",
  "matches any character, including unicode {1}": "matches any character, including Unicode {1}",
  "matches any character {1}": "matches any character {1}",
  "the string": "the string",
  "a line": "a line",
  "asserts position at start of {1}": "asserts position at start of {1}",
  "asserts position at end of {1}": "asserts position at end of {1}",
  "matches a single character in the list {1} {2}": "matches a single character in the list {1} {2}",
  "matches the {1} {2} literally {3}": "matches the {1} {2} literally {3}",
  "character": "character",
  "characters": "characters",
  "matches the negation of {1}": "matches the negation of {1}",
  "equal to {1}": "equal to {1}",
  "matches a character with {1} value {2} through {3}": "matches a character with {1} value {2} through {3}",
  "matches a alphanumeric character {1}": "matches a alphanumeric character {1}",
  "matches a alphanumeric character or {1} {2} (also written as {3})": "matches a alphanumeric character or {1} {2} (also written as {3})",
  "matches a alphabetic character {1}": "matches a alphabetic character {1}",
  "matches a whitespace character, including a line break {1} (also written as {2})": "matches a whitespace character, including a line break {1} (also written as {2})",
  "matches a control character {1}": "matches a control character {1}",
  "matches a digit {1} (also written as {2})": "matches a digit {1} (also written as {2})",
  "matches a visible character {1}": "matches a visible character {1}",
  "matches a lowercase letter {1}": "matches a lower case letter {1}",
  "matches a visible character or the space character {1}": "matches a visible character or the space character {1}",
  "matches a punctuation character {2}": "matches a punctuation character {2}",
  "matches a uppercase letter {1}": "matches a upper case letter {1}",
  "matches a hexadecimal digit {1}": "matches a hexadecimal digit {1}",
  "unlimited": "unlimited",
  "one": "one",
  "zero": "zero",
  "meaningless quantifier": "meaningless quantifier",
  "causes token to be ignored": "causes token to be ignored",
  "{1} {2} — Exactly {3} {4} {5}": "{1} {2} — Exactly {3} {4} {5}",
  "Quantifier": "Quantifier",
  "times": "times",
  "time": "time",
  "as many times as possible, without giving back": "as many times as possible, without giving back",
  "possessive": "possessive",
  "as few times as possible, expanding as needed": "as few times as possible, expanding as needed",
  "lazy": "lazy",
  "as many times as possible, giving back as needed": "as many times as possible, giving back as needed",
  "greedy": "greedy",
  "{1} {2} — Between {3} and {4} times, {5} {6}": "{1} {2} — Between {3} and {4} times, {5} {6}",
  "Quoted Literals": "Quoted Literals",
  "recurses the entire pattern": "recurses the entire pattern",
  "recurses the {1} subpattern": "recurses the {1} subpattern",
  "recurses the subpattern named {1}": "recurses the subpattern named {1}",
  "matches the character {1} with index {2} ({3} or {4}) literally ({5})": "matches the character {1} with index {2} ({3} or {4}) literally ({5})",
  "matches any kind of letter from any language": "matches any kind of letter from any language",
  "matches a lowercase letter that has an uppercase variant": "matches a lower case letter that has an upper case variant",
  "matches an uppercase letter that has a lowercase variant": "matches an upper case letter that has a lower case variant",
  "matches a letter that appears at the start of a word when only the first letter of the word is capitalized": "matches a letter that appears at the start of a word when only the first letter of the word is capitalized",
  "matches a letter that exists in lowercase and uppercase variants (combination of {1}, {2} and {3})": "matches a letter that exists in lower case and upper case variants (combination of {1}, {2} and {3})",
  "matches a special character that is used like a letter": "matches a special character that is used like a letter",
  "matches a letter or ideograph that does not have lowercase and uppercase variants": "matches a letter or ideograph that does not have lower case and upper case variants",
  "matches a character intended to be combined with another character (e.g. accents, umlauts, enclosing boxes, etc.)": "matches a character intended to be combined with another character (e.g. accents, umlauts, enclosing boxes, etc.)",
  "matches a character intended to be combined with another character without taking up extra space (e.g. accents, umlauts, etc.)": "matches a character intended to be combined with another character without taking up extra space (e.g. accents, umlauts, etc.)",
  "matches a character intended to be combined with another character that takes up extra space (vowel signs in many Eastern languages)": "matches a character intended to be combined with another character that takes up extra space (vowel signs in many Eastern languages)",
  "matches a character that encloses the character is is combined with (circle, square, keycap, etc.)": "matches a character that encloses the character is is combined with (circle, square, keycap, etc.)",
  "matches any kind of whitespace or invisible separator": "matches any kind of whitespace or invisible separator",
  "matches a whitespace character that is invisible, but does take up space": "matches a whitespace character that is invisible, but does take up space",
  "matches a line separator character {1}": "matches a line separator character {1}",
  "matches a paragraph separator character {1}": "matches a paragraph separator character {1}",
  "matches any math symbols, currency signs, dingbats, box-drawing characters, etc": "matches any maths symbols, currency signs, dingbats, box-drawing characters, etc",
  "matches any mathematical symbol": "matches any mathematical symbol",
  "matches any currency sign": "matches any currency sign",
  "matches a combining character (mark) as a full character on its own": "matches a combining character (mark) as a full character on its own",
  "matches various symbols that are not math symbols, currency signs, or combining characters": "matches various symbols that are not maths symbols, currency signs, or combining characters",
  "matches any kind of numeric character in any script": "matches any kind of numeric character in any script",
  "matches a number that looks like a letter, such as a Roman numeral": "matches a number that looks like a letter, such as a Roman numeral",
  "matches a superscript or subscript digit, or a number that is not a digit (excluding numbers from ideographic scripts)": "matches a superscript or subscript digit, or a number that is not a digit (excluding numbers from ideographic scripts)",
  "matches any kind of punctuation character": "matches any kind of punctuation character",
  "matches any kind of hyphen or dash": "matches any kind of hyphen or dash",
  "matches any kind of opening bracket": "matches any kind of opening bracket",
  "matches any kind of closing bracket": "matches any kind of closing bracket",
  "matches any kind of opening quote": "matches any kind of opening quote",
  "matches any kind of closing quote": "matches any kind of closing quote",
  "matches a punctuation character such as an underscore that connects words": "matches a punctuation character such as an underscore that connects words",
  "matches any kind of punctuation character that is not a dash, bracket, quote or connector": "matches any kind of punctuation character that is not a dash, bracket, quote or connector",
  "matches invisible control characters and unused code points": "matches invisible control characters and unused code points",
  "matches an ASCII {1} or Latin-1 {2} control character": "matches an ASCII {1} or Latin-1 {2} control character",
  "matches invisible formatting indicator": "matches invisible formatting indicator",
  "matches any code point reserved for private use": "matches any code point reserved for private use",
  "matches one half of a surrogate pair in {1} encoding": "matches one half of a surrogate pair in {1} encoding",
  "matches any code point to which no character has been assigned": "matches any code point to which no character has been assigned",
  "matches any characters that {1} does not": "matches any characters that {1} does not",
  "matches any characters in the {1} script": "matches any characters in the {1} script",
  "sets the property mode to {1}": "sets the property mode to {1}",
  "sets the property mode to Unicode": "sets the property mode to Unicode",
  "suppresses the start-of-match optimizations that are otherwise run by Perl": "suppresses the start-of-match optimizations that are otherwise run by Perl",
  "specifies a newline convention: carriage return": "specifies a newline convention: carriage return",
  "specifies a newline convention: line-feed": "specifies a newline convention: line-feed",
  "specifies a newline convention: {1}, followed by {2}": "specifies a newline convention: {1}, followed by {2}",
  "specifies a newline convention: {1}, {2} or {3}": "specifies a newline convention: {1}, {2} or {3}",
  "specifies a newline convention: all unicode newline sequences": "specifies a newline convention: all Unicode newline sequences",
  "specifies a newline convention: {1}, {2} or {3} only": "specifies a newline convention: {1}, {2} or {3} only",
  "specifies a newline convention: any Unicode newline sequence": "specifies a newline convention: any Unicode newline sequence",
  "marker verb whose main purpose is to track how a match was arrived at": "marker verb whose main purpose is to track how a match was arrived at",
  "verb synonymous with {1}. Forces a matching failure at the given position in the pattern": "verb synonymous with {1}. Forces a matching failure at the given position in the pattern",
  "shorthand for {1}": "shorthand for {1}",
  "this verb causes the match to fail at the current starting position in the subject if the rest of the pattern does not match": "this verb causes the match to fail at the current starting position in the subject if the rest of the pattern does not match",
  "causes the whole match to fail outright if the rest of the pattern does not match": "causes the whole match to fail outright if the rest of the pattern does not match",
  "causes a skip to the next innermost alternative if the rest of the pattern does not match": "causes a skip to the next innermost alternative if the rest of the pattern does not match",
  "acts like {1}, except that if the  pattern  is unanchored, the bumpalong advance is not to the next character, but to the position in the subject where {2} was encountered": "acts like {1}, except that if the  pattern  is unanchored, the bumpalong advance is not to the next character, but to the position in the subject where {2} was encountered",
  "this verb causes the match to end successfully, skipping the remainder of the pattern": "this verb causes the match to end successfully, skipping the remainder of the pattern",
  "Undescribed specific verb; No description for it yet (nothing's perfect)": "Undescribed specific verb; No description for it yet (nothing's perfect)",
  "An explanation of your regex will be automatically generated as you type.": "An explanation of your regex will be automatically generated as you type.",
  "Your pattern contains one or more errors, please see the explanation section above.": "Your pattern contains one or more errors, please see the explanation section above.",
  "Your expression took too long to finish and was terminated. Please increase the timeout and try again.": "Your expression took too long to finish and was terminated. Please increase the timeout and try again.",
  "Catastrophic backtracking has been detected and the execution of your expression has been halted. To find out more what this is, please read the following article:": "Catastrophic backtracking has been detected and the execution of your expression has been halted. To find out more what this is, please read the following article:",
  "I recommend you launch the debugger in the menu to the left and analyze the data to find out the cause.": "I recommend you launch the debugger in the menu to the left and analyse the data to find out the cause.",
  "The match was halted because the offset does not point to the beginning of a valid UTF-16 character.": "The match was halted because the offset does not point to the beginning of a valid UTF-16 character.",
  "Your expression caused an unhandled error. Please submit all your data (regex, test string, etc) and the following error in a bug report:": "Your expression caused an unhandled error. Please submit all your data (regex, test string, etc) and the following error in a bug report:",
  "Group {1}": "Group {1}",
  "group did not participate in match": "group did not participate in match",
  "Detailed match information will be displayed here automatically.": "Detailed match information will be displayed here automatically.",
  "Your regular expression does not match the subject string.": "Your regular expression does not match the subject string.",
  "No match groups were extracted.": "No match groups were extracted.",
  "This means that your pattern did match but there were no capturing groups that matched anything in the subject string.": "This means that your pattern did match but there were no capturing groups that matched anything in the subject string.",
  "All Tokens": "All Tokens",
  "Common Tokens": "Common Tokens",
  "General Tokens": "General Tokens",
  "Anchors": "Anchors",
  "Meta Sequences": "Meta Sequences",
  "Quantifiers": "Quantifiers",
  "Group Constructs": "Group Constructs",
  "Character Classes": "Character Classes",
  "Flags/Modifiers": "Flags/Modifiers",
  "Search quickref": "Search quickref",
  "Newline": "Newline",
  "Matches a newline character": "Matches a newline character",
  "Carriage return": "Carriage return",
  "Matches a carriage return character, unicode character 2185.": "Matches a carriage return character, Unicode character 2185.",
  "Tab": "Tab",
  "Matches a tab character. Historically, tab stops happen every 8 characters.": "Matches a tab character. Historically, tab stops happen every 8 characters.",
  "Here comes a {1} tab character.": "Here comes a {1} tab character.",
  "Null character": "Null character",
  "Matches a null character, most often visually represented in unicode using U+2400.": "Matches a null character, most often visually represented in Unicode using U+2400.",
  "A single character of: a, b or c": "A single character of: a, b or c",
  "Matches either an a, b or c character": "Matches either an a, b or c character",
  "A character except: a, b or c": "A character except: a, b or c",
  "Matches any character except for an a, b or c": "Matches any character except for an a, b or c",
  "A character in the range: a-z": "A character in the range: a-z",
  "Matches any characters between a and z, including a and z.": "Matches any characters between a and z, including a and z.",
  "A character not in the range: a-z": "A character not in the range: a-z",
  "Matches any characters except those in the range a-z.": "Matches any characters except those in the range a-z.",
  "A character in the range: a-z or A-Z": "A character in the range: a-z or A-Z",
  "Matches any characters between a-z or A-Z. You can combine as much as you please.": "Matches any characters between a-z or A-Z. You can combine as much as you please.",
  "Letters and digits": "Letters and digits",
  "An alternate way to match any letter or digit. Equivalent to [A-Za-z0-9]. [[:alnum:]] is a POSIX notation and it needs to be inside a [character class] notation.": "An alternate way to match any letter or digit. Equivalent to [A-Za-z0-9]. [[:alnum:]] is a POSIX notation and it needs to be inside a [character class] notation.",
  "Letters": "Letters",
  "An alternate way to match alphabet letters. Equivalent to [A-Za-z]. [[:alpha:]] is a POSIX notation and it needs to be inside a [character class] notation.": "An alternate way to match alphabet letters. Equivalent to [A-Za-z]. [[:alpha:]] is a POSIX notation and it needs to be inside a [character class] notation.",
  "Ascii codes 0-127": "Ascii codes 0-127",
  "Matches any character in the valid ASCII range. Equivalent to [\u0000-]. [[:ascii:]] is a POSIX notation and it needs to be inside a [character class] notation.": "Matches any character in the valid ASCII range. Equivalent to [\u0000-]. [[:ascii:]] is a POSIX notation and it needs to be inside a [character class] notation.",
  "Space or tab only": "Space or tab only",
  "Matches spaces and tabs (but not newlines). Equivalent to [ \t]. [[:blank:]] is a POSIX notation and it needs to be inside a [character class] notation.": "Matches spaces and tabs (but not newlines). Equivalent to [ \t]. [[:blank:]] is a POSIX notation and it needs to be inside a [character class] notation.",
  "Control characters": "Control characters",
  "Matches characters that are often used to control text presentation, including newlines, null characters, tabs and the escape character. Equivalent to [\\x00-\\x1F\\x7F]. [[:cntrl:]] is a POSIX notation and it needs to be inside a [character class] notation.": "Matches characters that are often used to control text presentation, including newlines, null characters, tabs and the escape character. Equivalent to [\\x00-\\x1F\\x7F]. [[:cntrl:]] is a POSIX notation and it needs to be inside a [character class] notation.",
  "Decimal digits": "Decimal digits",
  "Matches decimal digits. Equivalent to [0-9]. [[:digit:]] is a POSIX notation and it needs to be inside a [character class] notation.": "Matches decimal digits. Equivalent to [0-9]. [[:digit:]] is a POSIX notation and it needs to be inside a [character class] notation.",
  "Visible characters (not space)": "Visible characters (not space)",
  "Matches printable, non-whitespace, non-control characters only. Equivalent to [!-~]. [[:graph:]] is a POSIX notation and it needs to be inside a [character class] notation.": "Matches printable, non-whitespace, non-control characters only. Equivalent to [!-~]. [[:graph:]] is a POSIX notation and it needs to be inside a [character class] notation.",
  "Lowercase letters": "Lower case letters",
  "Matches lowercase letters. Equivalent to [a-z]. [[:lower:]] is a POSIX notation and it needs to be inside a [character class] notation.": "Matches lower case letters. Equivalent to [a-z]. [[:lower:]] is a POSIX notation and it needs to be inside a [character class] notation.",
  "Visible characters": "Visible characters",
  "Matches printable characters, part of the basic latin set, such as letters and spaces, without including control characters. [[:print:]] is a POSIX notation and it needs to be inside a [character class] notation.": "Matches printable characters, part of the basic Latin set, such as letters and spaces, without including control characters. [[:print:]] is a POSIX notation and it needs to be inside a [character class] notation.",
  "Visible punctuation characters": "Visible punctuation characters",
  "Matches characters that are not whitespace, letters or numbers. [[:punct:]] is a POSIX notation and it needs to be inside a [character class] notation.": "Matches characters that are not whitespace, letters or numbers. [[:punct:]] is a POSIX notation and it needs to be inside a [character class] notation.",
  "Whitespace": "Whitespace",
  "Matches whitespace characters. Equivalent to \\s. [[:space:]] is a POSIX notation and it needs to be inside a [character class] notation.": "Matches whitespace characters. Equivalent to \\s. [[:space:]] is a POSIX notation and it needs to be inside a [character class] notation.",
  "Uppercase letters": "Upper case letters",
  "Matches uppercase letters. Equivalent to [A-Z]. [[:upper:]] is a POSIX notation and it needs to be inside a [character class] notation.": "Matches upper case letters. Equivalent to [A-Z]. [[:upper:]] is a POSIX notation and it needs to be inside a [character class] notation.",
  "Word characters": "Word characters",
  "Matches letters, numbers and underscores. Equivalent to \\w or [a-zA-Z0-9_]. [[:word:]] is a POSIX notation and it needs to be inside a [character class] notation.": "Matches letters, numbers and underscores. Equivalent to \\w or [a-zA-Z0-9_]. [[:word:]] is a POSIX notation and it needs to be inside a [character class] notation.",
  "Hexadecimal digits": "Hexadecimal digits",
  "Matches hexadecimal digits, case insensitive. Equivalent to [0-9a-fA-F].": "Matches hexadecimal digits, case insensitive. Equivalent to [0-9a-fA-F].",
  "Start of word": "Start of word",
  "This POSIX equivalent of the `\\\\b` word boundary is interpreted as {1}": "This POSIX equivalent of the `\\\\b` word boundary is interpreted as {1}",
  "End of word": "End of word",
  "This POSIX equivalent of the \"\\b\" word boundary is interpreted as": "This POSIX equivalent of the \"\\b\" word boundary is interpreted as",
  "Any single character": "Any single character",
  "Matches any character other than newline (or including newline with the /s flag)": "Matches any character other than newline (or including newline with the /s flag)",
  "Any whitespace character": "Any whitespace character",
  "Matches any space, tab or newline character.": "Matches any space, tab or newline character.",
  "Any non-whitespace character": "Any non-whitespace character",
  "Matches anything other than a space, tab or newline.": "Matches anything other than a space, tab or newline.",
  "Any digit": "Any digit",
  "Matches any decimal digit. Equivalent to [0-9].": "Matches any decimal digit. Equivalent to [0-9].",
  "Any non-digit": "Any non-digit",
  "Matches anything other than a decimal digit.": "Matches anything other than a decimal digit.",
  "Any word character": "Any word character",
  "Matches any letter, digit or underscore. Equivalent to [a-zA-Z0-9_].": "Matches any letter, digit or underscore. Equivalent to [a-zA-Z0-9_].",
  "Any non-word character": "Any non-word character",
  "Matches anything other than a letter, digit or underscore.": "Matches anything other than a letter, digit or underscore.",
  "Any Unicode sequences, linebreaks included": "Any Unicode sequences, line breaks included",
  "Matches any valid Unicode sequence, including line breaks.": "Matches any valid Unicode sequence, including line breaks.",
  "Match one data unit": "Match one data unit",
  "Matches exactly one data unit of input. Can match individual bytes in UTF-8 mode, leading to undefined behaviour if a search starts inside a character.": "Matches exactly one data unit of input. Can match individual bytes in UTF-8 mode, leading to undefined behaviour if a search starts inside a character.",
  "Unicode newlines": "Unicode newlines",
  "Matches any Unicode newline character: <CR>, <LF>;, <CR><LF>. Equivalent to [\\r\\n].": "Matches any Unicode newline character: <CR>, <LF>;, <CR><LF>. Equivalent to [\\r\\n].",
  "Vertical whitespace character": "Vertical whitespace character",
  "Matches newlines and vertical tabs. Works with Unicode. Vertical tabs can be inserted in some word processors using CMD/CTRL+ENTER.": "Matches newlines and vertical tabs. Works with Unicode. Vertical tabs can be inserted in some word processors using CMD/CTRL+ENTER.",
  "Negation of \\v - anything except newlines and vertical tabs": "Negation of \\v - anything except newlines and vertical tabs",
  "Matches anything not matched by \u000b (newlines and vertical tabs)": "Matches anything not matched by \u000b (newlines and vertical tabs)",
  "Horizontal whitespace character": "Horizontal whitespace character",
  "Matches spaces and horizontal tabs. Works with Unicode. Equivalent to [\ts].": "Matches spaces and horizontal tabs. Works with Unicode. Equivalent to [\ts].",
  "Negation of \\h": "Negation of \\h",
  "Matches any character that is not horizontal whitespace (\\H).": "Matches any character that is not horizontal whitespace (\\H).",
  "Reset match": "Reset match",
  "Sets the given position in the regex as the new \"start\" of the match. This means that nothing preceding the K will be captured in the overall match.": "Sets the given position in the regex as the new \"start\" of the match. This means that nothing preceding the K will be captured in the overall match.",
  "Match nth subpattern": "Match nth subpattern",
  "Usually referred to as a `backreference`, this will match a repeat of the text captured in a previous set of parentheses.": "Usually referred to as a `backreference`, this will match a repeat of the text captured in a previous set of parentheses.",
  "Unicode property X": "Unicode property X",
  "Matches a unicode character with the given property:": "Matches a Unicode character with the given property:",
  "Unicode property or script category": "Unicode property or script category",
  "Matches a unicode character with the given group of properties or categories:": "Matches a Unicode character with the given group of properties or categories:",
  "Negation of \\pX": "Negation of \\pX",
  "Matches a unicode character without the given property.": "Matches a Unicode character without the given property.",
  "Negation of \\p": "Negation of \\p",
  "Matches a unicode character that doesn't have any of the given properties.": "Matches a Unicode character that doesn't have any of the given properties.",
  "Quote; treat as literals": "Quote; treat as literals",
  "Any characters between \\Q and \\E, including metacharacters, will be treated as literals.": "Any characters between \\Q and \\E, including metacharacters, will be treated as literals.",
  "Match subpattern `name`": "Match subpattern `name`",
  "Matches the text matched by a previously named capture group.": "Matches the text matched by a previously named capture group.",
  "This is an alternate syntax for \\k&lt;name&gt; or \\k{name}.": "This is an alternate syntax for \\k&lt;name&gt; or \\k{name}.",
  "This is an alternate syntax for \\k&lt;name&gt; or \\k'name' and it is valid for .NET. Note that you cannot use curly brackets (?{name}a+) to name a capture group in PCRE": "This is an alternate syntax for \\k&lt;name&gt; or \\k'name' and it is valid for .NET. Note that you cannot use curly brackets (?{name}a+) to name a capture group in PCRE",
  "Matches the text captured in the nth group. n can contain more than one digit, if necessary. This may be useful in order to avoid ambiguity with octal characters.": "Matches the text captured in the nth group. n can contain more than one digit, if necessary. This may be useful in order to avoid ambiguity with octal characters.",
  "Matches the text captured in the nth group. n can contain more than one digit, if necessary. This may be useful in order to avoid ambiguity with octal characters. This is an alternate syntax for \\gn. It can be useful in a situation where a literal number needs to be matched immediately after a \\gn in the regex.": "Matches the text captured in the nth group. n can contain more than one digit, if necessary. This may be useful in order to avoid ambiguity with octal characters. This is an alternate syntax for \\gn. It can be useful in a situation where a literal number needs to be matched immediately after a \\gn in the regex.",
  "Matches the text captured in the nth group. n can contain more than one digit, if necessary. Alternate syntax for \\g{n}": "Matches the text captured in the nth group. n can contain more than one digit, if necessary. Alternate syntax for \\g{n}",
  "Matches the text captured in the nth group. n can contain more than one digit, if necessary. Alternate syntax for \\g<n>": "Matches the text captured in the nth group. n can contain more than one digit, if necessary. Alternate syntax for \\g<n>",
  "Match nth relative previous subpattern": "Match nth relative previous subpattern",
  "Matches items captured in the nth capture group prior to the current position of \\g{-n}. \\g{-1} would be the last capture group before \\g. \\g{-2} would be the capture group before the last, and so on.": "Matches items captured in the nth capture group prior to the current position of \\g{-n}. \\g{-1} would be the last capture group before \\g. \\g{-2} would be the capture group before the last, and so on.",
  "Match nth relative upcoming subpattern": "Match nth relative upcoming subpattern",
  "Matches items captured in the nth capture group ahead of the current position of \\g<+n>. \\g<+2> is the second capture group after \\g.": "Matches items captured in the nth capture group ahead of the current position of \\g<+n>. \\g<+2> is the second capture group after \\g.",
  "Matches items captured in the nth capture group ahead of the current position of \\g<+n>. \\g'+2' is the second capture group after \\g.": "Matches items captured in the nth capture group ahead of the current position of \\g<+n>. \\g'+2' is the second capture group after \\g.",
  "Match previously-named capture group `name`": "Match previously-named capture group `name`",
  "Matches the capture group called `name`. Capture group has to be named before \\g is called.": "Matches the capture group called `name`. Capture group has to be named before \\g is called.",
  "Matches the capture group called \"name\". Capture group has to be named before \\g is called. This is an alternative notation for \\g'name' or \\g<name>. Note that you cannot use curly brackets (?{name}a+) to name a capture group in PCRE": "Matches the capture group called \"name\". Capture group has to be named before \\g is called. This is an alternative notation for \\g'name' or \\g<name>. Note that you cannot use curly brackets (?{name}a+) to name a capture group in PCRE",
  "Matches the capture group called \"name\". Capture group has to be named before \\g is called. This is an alternative notation for \\g'name' or \\g{name}": "Matches the capture group called \"name\". Capture group has to be named before \\g is called. This is an alternative notation for \\g'name' or \\g{name}",
  "Hex character YYYY": "Hex character YYYY",
  "Matches the unicode character with the given hex value.": "Matches the Unicode character with the given hex value.",
  "Unicode Character Table": "Unicode Character Table",
  "Hex character YY": "Hex character YY",
  "Matches the 8-bit character with the given hex value.": "Matches the 8-bit character with the given hex value.",
  "Matches the 16-bit character with the given hex value.": "Matches the 16-bit character with the given hex value.",
  "Octal character ddd": "Octal character ddd",
  "Matches the 8-bit character with the given octal value.": "Matches the 8-bit character with the given octal value.",
  "Octal Character Table": "Octal Character Table",
  "Control character Y": "Control character Y",
  "Matches ASCII characters typically associated with Control+A through Control+Z: \\x01 through \\x1A.": "Matches ASCII characters typically associated with Control+A through Control+Z: \\x01 through \\x1A.",
  "Ascii control characters": "Ascii control characters",
  "Backspace character": "Backspace character",
  "Matches the backspace control character.": "Matches the backspace control character.",
  "Makes any character literal": "Makes any character literal",
  "This may be used to match the literal value of any metacharacter, or the / delimiter.": "This may be used to match the literal value of any metacharacter, or the / delimiter.",
  "Capture everything enclosed": "Capture everything enclosed",
  "Parts of the regex enclosed in parentheses may be referred to later in the expression or extracted from the results of a successful match.": "Parts of the regex enclosed in parentheses may be referred to later in the expression or extracted from the results of a successful match.",
  "Match either a or b": "Match either a or b",
  "Matches the a or the b part of the subexpression.": "Matches the a or the b part of the subexpression.",
  "Match everything enclosed": "Match everything enclosed",
  "This construct is similar to (...), but won't create a capture group.": "This construct is similar to (...), but won't create a capture group.",
  "Atomic group (non-capturing)": "Atomic group (non-capturing)",
  "Matches the longest possible substring in the group and doesn't allow later backtracking to reevaluate the group. It is not a capturing group.": "Matches the longest possible substring in the group and doesn't allow later backtracking to reevaluate the group. It is not a capturing group.",
  "Duplicate subpattern group number": "Duplicate subpattern group number",
  "Any subpatterns in (...) in such a group share the same number.": "Any subpatterns in (...) in such a group share the same number.",
  "Any text appearing in this group is ignored in the regex. Anoter option is enabling the x flag to allow #comments. This flag will also cause regex to ignore spaces.": "Any text appearing in this group is ignored in the regex. Anoter option is enabling the x flag to allow #comments. This flag will also cause regex to ignore spaces.",
  "Named capturing group": "Named capturing group",
  "This capturing group can be referred to using the given name instead of a number. Alternative notation for (?<name>...) and (?P<name>...).": "This capturing group can be referred to using the given name instead of a number. Alternative notation for (?<name>...) and (?P<name>...).",
  "This capturing group can be referred to using the given name instead of a number. Alternative notation for (?'name'...) and (?P<name>...).": "This capturing group can be referred to using the given name instead of a number. Alternative notation for (?'name'...) and (?P<name>...).",
  "This capturing group can be referred to using the given name instead of a number. Alternative notation for (?<name>...) and (?'name'...) when using a PCRE flavor.": "This capturing group can be referred to using the given name instead of a number. Alternative notation for (?<name>...) and (?'name'...) when using a PCRE flavour.",
  "Inline modifiers": "Inline modifiers",
  "These enable setting regex flags within the expression itself. You can also unset flags using a minus sign: (?-i)": "These enable setting regex flags within the expression itself. You can also unset flags using a minus sign: (?-i)",
  "Conditional statement": "Conditional statement",
  "If capturing group 1 was matched so far, matches the pattern before the vertical bar. Otherwise, matches the pattern after the vertical bar. A group name, or a relative position (-1) in PCRE, can be used. Global flag breaks conditionals.": "If capturing group 1 was matched so far, matches the pattern before the vertical bar. Otherwise, matches the pattern after the vertical bar. A group name, or a relative position (-1) in PCRE, can be used. Global flag breaks conditionals.",
  "If recursion of the whole pattern is successful, do something | otherwise do this.": "If recursion of the whole pattern is successful, do something | otherwise do this.",
  "If recursion of capture group id 'n' is successful, do something | otherwise do this.": "If recursion of capture group id 'n' is successful, do something | otherwise do this.",
  "If recursion of capture group named 'start' is successful, do something | otherwise do this.": "If recursion of capture group named 'start' is successful, do something | otherwise do this.",
  "Lookahead conditional": "Lookahead conditional",
  "If the lookahead succeeds, matches the pattern before the vertical bar. Otherwise, matches the pattern after the vertical bar. The lookaround can be negative. Global flag breaks conditionals.": "If the lookahead succeeds, matches the pattern before the vertical bar. Otherwise, matches the pattern after the vertical bar. The lookaround can be negative. Global flag breaks conditionals.",
  "Lookbehind conditional": "Lookbehind conditional",
  "If the lookbehind succeeds, match the pattern before the vertical bar. Otherwise, matches the pattern after the vertical bar. The lookaround can be negative. Global flag, 'g', breaks conditionals.": "If the lookbehind succeeds, match the pattern before the vertical bar. Otherwise, matches the pattern after the vertical bar. The lookaround can be negative. Global flag, 'g', breaks conditionals.",
  "Recurse entire pattern": "Recurse entire pattern",
  "Recursively match the entire expression. (?0) and \\g&lt;0&gt; are synonymous. This is useful for balanced tags.": "Recursively match the entire expression. (?0) and \\g&lt;0&gt; are synonymous. This is useful for balanced tags.",
  "Recurse first subpattern": "Recurse first subpattern",
  "Recursively match the first capture group.": "Recursively match the first capture group.",
  "Recurse first relative subpattern": "Recurse first relative subpattern",
  "Match the first capture group following the current position in the expression. (?+2) is the second one, (?-1) is before current position.": "Match the first capture group following the current position in the expression. (?+2) is the second one, (?-1) is before current position.",
  "Recurse subpattern `name`": "Recurse subpattern `name`",
  "Recursively matches the given named capture group. Python supports (?P=named_group), but 'named group' has to be previously defined.": "Recursively matches the given named capture group. Python supports (?P=named_group), but 'named group' has to be previously defined.",
  "Matches the text matched by a previously named capture group. This is the python specific notation.": "Matches the text matched by a previously named capture group. This is the python specific notation.",
  "Recursively matches the given named subpattern or capture group.": "Recursively matches the given named subpattern or capture group.",
  "Pre-define patterns before using them": "Pre-define patterns before using them",
  "The DEFINE group is completely ignored by regex. It gets treated as a var name=\"value\", whereas you can recall the specific pattern for use via its name. Multiple patterns can be defined in the same DEFINE group.": "The DEFINE group is completely ignored by regex. It gets treated as a var name=\"value\", whereas you can recall the specific pattern for use via its name. Multiple patterns can be defined in the same DEFINE group.",
  "Positive lookahead": "Positive lookahead",
  "Asserts that the given subpattern can be matched here, without consuming characters": "Asserts that the given subpattern can be matched here, without consuming characters",
  "Negative lookahead": "Negative lookahead",
  "Starting at the current position in the expression, ensures that the given pattern will not match. Does not consume characters.": "Starting at the current position in the expression, ensures that the given pattern will not match. Does not consume characters.",
  "Positive lookbehind": "Positive lookbehind",
  "Ensures that the given pattern will match, ending at the current position in the expression. The pattern must have a fixed width. Does not consume any characters.": "Ensures that the given pattern will match, ending at the current position in the expression. The pattern must have a fixed width. Does not consume any characters.",
  "Negative lookbehind": "Negative lookbehind",
  "Ensures that the given pattern would not match and end at the current position in the expression. The pattern must have a fixed width. Does not consume characters.": "Ensures that the given pattern would not match and end at the current position in the expression. The pattern must have a fixed width. Does not consume characters.",
  "Control verb": "Control verb",
  "This causes the regex to end successfully, skipping the rest of the pattern.": "This causes the regex to end successfully, skipping the rest of the pattern.",
  "If this token is inside a capturing group, only that capturing group is ended successfully at that particular location, while the parent pattern continues to execute.": "If this token is inside a capturing group, only that capturing group is ended successfully at that particular location, while the parent pattern continues to execute.",
  "(*FAIL) or (*F) is a synonym for (?!), and it allows you to force a matching failure at a specific point in the regex.": "(*FAIL) or (*F) is a synonym for (?!), and it allows you to force a matching failure at a specific point in the regex.",
  "(*MARK:NAME) or (*:NAME) is used to track how a match was arrived at. Name is always required, but it doesn'tneed to be unique. When used in conjunction with the /K modifier, pcretest can return the mark together with a successful match.": "(*MARK:NAME) or (*:NAME) is used to track how a match was arrived at. Name is always required, but it doesn'tneed to be unique. When used in conjunction with the /K modifier, pcretest can return the mark together with a successful match.",
  "This verb does not allow regex to continue parsing after a matching failure, even if there are other matching strings ahead, and regardless of how many successful matches are before the failure.": "This verb does not allow regex to continue parsing after a matching failure, even if there are other matching strings ahead, and regardless of how many successful matches are before the failure.",
  "(*PRUNE) or (*PRUNE:NAME) will cause the regex to exit if it tries to backtrack past its position. This is useful when looking to cut down on backtracking at specific points in the regex. The example above would normally match both terms but due to (*PRUNE) the second alternative is not acted on.": "(*PRUNE) or (*PRUNE:NAME) will cause the regex to exit if it tries to backtrack past its position. This is useful when looking to cut down on backtracking at specific points in the regex. The example above would normally match both terms but due to (*PRUNE) the second alternative is not acted on.",
  "(*SKIP) or (*SKIP:NAME) will cause the regex to give up on the current match if it tries to backtrack past its position. This is useful when looking to cut down on backtracking at specific points in the regex.": "(*SKIP) or (*SKIP:NAME) will cause the regex to give up on the current match if it tries to backtrack past its position. This is useful when looking to cut down on backtracking at specific points in the regex.",
  "(*THEN) or (*THEN:NAME) allows one to cut down on backtracking within an alternation. It won't allow regex to backtrack past its position, and it will give up matching the current alternation.": "(*THEN) or (*THEN:NAME) allows one to cut down on backtracking within an alternation. It won't allow regex to backtrack past its position, and it will give up matching the current alternation.",
  "Pattern modifier": "Pattern modifier",
  "This allows regex to treat the string as UTF, be it 8, 16, or 32.": "This allows regex to treat the string as UTF, be it 8, 16, or 32.",
  "This allows regex to treat the string as UTF-8, specifically.": "This allows regex to treat the string as UTF-8, specifically.",
  "This allows regex to treat the string as UTF-16, specifically.": "This allows regex to treat the string as UTF-16, specifically.",
  "This allows regex to treat the string as UTF-32, specifically.": "This allows regex to treat the string as UTF-32, specifically.",
  "UCP (Unicode Character Properties) allows regex to treat the string as unicode, which means that \\d and \\w are extended to match other unicode characters than [0-9] and [a-zA-Z0-9_].": "UCP (Unicode Character Properties) allows regex to treat the string as Unicode, which means that \\d and \\w are extended to match other Unicode characters than [0-9] and [a-zA-Z0-9_].",
  "Line break modifier": "Line break modifier",
  "(*CR) makes it so that only a carriage return character is considered a line break.": "(*CR) makes it so that only a carriage return character is considered a line break.",
  "(*LF) makes it so that only a line feed character is considered a line break. Common in UNIX documents.": "(*LF) makes it so that only a line feed character is considered a line break. Common in UNIX documents.",
  "(*CRLF) makes it so that only a carriage return character followed by a line feed character is considered a line break. Common in Windows documents.": "(*CRLF) makes it so that only a carriage return character followed by a line feed character is considered a line break. Common in Windows documents.",
  "(*ANYCRLF) makes it so that either a carriage return character or a line feed character, or the two in sequence are considered a line break.": "(*ANYCRLF) makes it so that either a carriage return character or a line feed character, or the two in sequence are considered a line break.",
  "(*ANY) makes it so that any unicode newline character or sequence thereof counts as a line break.": "(*ANY) makes it so that any Unicode newline character or sequence thereof counts as a line break.",
  "This metacharacter matches any unicode newline character or sequence thereof. Its behavior can be controlled by (*UTF) pattern modifiers. In (*UTF8) mode, '\\R' will match the line separator, paragraph separator, carriage return, carriage return & newline sequence, line feed, vertical tab, form feed, and next line. When outside (*UTF8) mode, line and paragraph separators are not matched. Newline conventions can also be specified via (*BSR_ANYCRLF) and (*BSR_UNICODE)": "This metacharacter matches any Unicode newline character or sequence thereof. Its behaviour can be controlled by (*UTF) pattern modifiers. In (*UTF8) mode, '\\R' will match the line separator, paragraph separator, carriage return, carriage return & newline sequence, line feed, vertical tab, form feed, and next line. When outside (*UTF8) mode, line and paragraph separators are not matched. Newline conventions can also be specified via (*BSR_ANYCRLF) and (*BSR_UNICODE)",
  "This sets the convention for newline matching to '\\r\\n','\\r', or '\\n' for things like the '\\R' metacharacter.": "This sets the convention for newline matching to '\\r\\n','\\r', or '\\n' for things like the '\\R' metacharacter.",
  "This sets the convention for newline matching to any unicode newline character or sequence thereof, for things like the '\\R' metacharacter.": "This sets the convention for newline matching to any Unicode newline character or sequence thereof, for things like the '\\R' metacharacter.",
  "Regex engine modifier": "Regex engine modifier",
  "(*LIMIT_MATCH=x) where x is the number of times the regex engine is allowed to call match(). This user set limit cannot be increased past the compile time value or the default, however it can be restricted.": "(*LIMIT_MATCH=x) where x is the number of times the regex engine is allowed to call match(). This user set limit cannot be increased past the compile time value or the default, however it can be restricted.",
  "(*LIMIT_RECURSION=d) at the start of a pattern will limit the regex engine to 'd' number of recursions when matching. This user set limit cannot be increased past the compile time value or the default, however it can be restricted.": "(*LIMIT_RECURSION=d) at the start of a pattern will limit the regex engine to 'd' number of recursions when matching. This user set limit cannot be increased past the compile time value or the default, however it can be restricted.",
  "The PCRE regex engine automatically applies some internal optimizations to regexes to avoid unnecessary backtracking. This modifier will disable that behavior, and thus the engine will backtrack until the previously matching instruction fails to do so.": "The PCRE regex engine automatically applies some internal optimizations to regexes to avoid unnecessary backtracking. This modifier will disable that behaviour, and thus the engine will backtrack until the previously matching instruction fails to do so.",
  "Before even attempting a match, the regex engine makes some checks, such as the length of the string. If it is not long enough to fit the pattern, it will automatically reutn a no match. This optimization can be disabled by using this modifier.": "Before even attempting a match, the regex engine makes some checks, such as the length of the string. If it is not long enough to fit the pattern, it will automatically reutn a no match. This optimization can be disabled by using this modifier.",
  "Zero or one of a": "Zero or one of a",
  "Matches an `a` character or nothing.": "Matches an `a` character or nothing.",
  "Zero or more of a": "Zero or more of a",
  "Matches zero or more consecutive `a` characters.": "Matches zero or more consecutive `a` characters.",
  "One or more of a": "One or more of a",
  "Matches one or more consecutive `a` characters.": "Matches one or more consecutive `a` characters.",
  "Exactly 3 of a": "Exactly 3 of a",
  "Matches exactly 3 consecutive `a` characters.": "Matches exactly 3 consecutive `a` characters.",
  "3 or more of a": "3 or more of a",
  "Matches at least 3 consecutive `a` characters.": "Matches at least 3 consecutive `a` characters.",
  "Between 3 and 6 of a": "Between 3 and 6 of a",
  "Matches between 3 and 6 (inclusive) consecutive `a` characters.": "Matches between 3 and 6 (inclusive) consecutive `a` characters.",
  "Greedy quantifier": "Greedy quantifier",
  "Matches as many characters as possible.": "Matches as many characters as possible.",
  "Lazy quantifier": "Lazy quantifier",
  "Matches as few characters as possible.": "Matches as few characters as possible.",
  "Possessive quantifier": "Possessive quantifier",
  "Matches as many characters as possible; backtracking can\\'t reduce the number of characters matched. Because it is greedy, it will match all the way to the last digit, leaving nothing else for the {1} to match. Without backtracking, this regex fails to produce a match.": "Matches as many characters as possible; backtracking can\\'t reduce the number of characters matched. Because it is greedy, it will match all the way to the last digit, leaving nothing else for the {1} to match. Without backtracking, this regex fails to produce a match.",
  "Start of match": "Start of match",
  "This will match only at the starting point of the search or the position the previous successful match ended. Useful with the /g flag, or when you are only tring to match after a certain point in a string.": "This will match only at the starting point of the search or the position the previous successful match ended. Useful with the /g flag, or when you are only tring to match after a certain point in a string.",
  "Start of string": "Start of string",
  "Matches the start of a string without consuming any characters. If multiline mode is used, this will also match immediately after a newline character.": "Matches the start of a string without consuming any characters. If multiline mode is used, this will also match immediately after a newline character.",
  "End of string": "End of string",
  "Matches the end of a string without consuming any characters. If multiline mode is used, this will also match immediately before a newline character.": "Matches the end of a string without consuming any characters. If multiline mode is used, this will also match immediately before a newline character.",
  "Matches the start of a string only. Unlike ^, this is not affected by multiline mode.": "Matches the start of a string only. Unlike ^, this is not affected by multiline mode.",
  "Matches the end of a string only. Unlike $, this is not affected by multiline mode.": "Matches the end of a string only. Unlike $, this is not affected by multiline mode.",
  "Absolute end of string": "Absolute end of string",
  "Matches the end of a string only. Unlike $, this is not affected by multiline mode, and, in contrast to \\Z, will not match before a trailing newline at the end of a string.": "Matches the end of a string only. Unlike $, this is not affected by multiline mode, and, in contrast to \\Z, will not match before a trailing newline at the end of a string.",
  "A word boundary": "A word boundary",
  "Matches, without consuming any characters, immediately between a character matched by \\w and a character not matched by \\w (in either order). It cannot be used to separate non words from words.": "Matches, without consuming any characters, immediately between a character matched by \\w and a character not matched by \\w (in either order). It cannot be used to separate non words from words.",
  "Non-word boundary": "Non-word boundary",
  "Matches, without consuming any characters, at the position between two characters matched by \\w.": "Matches, without consuming any characters, at the position between two characters matched by \\w.",
  "Global": "Global",
  "Tells the engine not to stop after the first match has been found, but rather to continue until no more matches can be found.": "Tells the engine not to stop after the first match has been found, but rather to continue until no more matches can be found.",
  "Multiline": "Multiline",
  "The ^ and $ anchors now match at the beginning/end of each line respectively, instead of beginning/end of the entire string.": "The ^ and $ anchors now match at the beginning/end of each line respectively, instead of beginning/end of the entire string.",
  "Case insensitive": "Case insensitive",
  "A case insensitive match is performed, meaning capital letters will be matched by non-capital letters and vice versa.": "A case insensitive match is performed, meaning capital letters will be matched by non-capital letters and vice versa.",
  "This flag tells the engine to ignore all whitespace and allow for comments in the regex. Comments are indicated by a starting \"#\"-character. If you need to include a space character in your regex, it must now be escaped '\\ '.": "This flag tells the engine to ignore all whitespace and allow for comments in the regex. Comments are indicated by a starting \"#\"-character. If you need to include a space character in your regex, it must now be escaped '\\ '.",
  "Single line": "Single line",
  "This enabls the dot (.) metacharacter to also match new lines. The string could be visualised as a single line input.": "This enabls the dot (.) metacharacter to also match new lines. The string could be visualised as a single line input.",
  "Unicode": "Unicode",
  "Pattern strings will be treated as UTF-16, which means that unicode characters will also be included in [a-z] ranges, and in escape sequences.": "Pattern strings will be treated as UTF-16, which means that Unicode characters will also be included in [a-z] ranges, and in escape sequences.",
  "eXtended": "eXtended",
  "Any character following a \\ that is not a valid meta sequence will be faulted and raise an error. For example, escaping a (.) meta character will cause an error, and it will not match.": "Any character following a \\ that is not a valid meta sequence will be faulted and raise an error. For example, escaping a (.) meta character will cause an error, and it will not match.",
  "Ungreedy": "Ungreedy",
  "The engine will per default do lazy matching, instead of greedy. This means that a ? following a quantifier instead makes it greedy.": "The engine will per default do lazy matching, instead of greedy. This means that a ? following a quantifier instead makes it greedy.",
  "Anchor": "Anchor",
  "The pattern is forced to become anchored, equal to a ^.": "The pattern is forced to become anchored, equal to a ^.",
  "Duplicate group names": "Duplicate group names",
  "This allows regex to accept duplicate pattern names, however each capture group still has its own ID. Thus the two capture groups produce their own match instead of a single combined one.": "This allows regex to accept duplicate pattern names, however each capture group still has its own ID. Thus the two capture groups produce their own match instead of a single combined one.",
  "Complete match contents": "Complete match contents",
  "This will return a string with the complete match result from the regex.": "This will return a string with the complete match result from the regex.",
  "Contents in capture group 1": "Contents in capture group 1",
  "This will return a string with the contents from the first capture group. The number, in this case 1, can be any number as long as it corresponds to a valid capture group.": "This will return a string with the contents from the first capture group. The number, in this case 1, can be any number as long as it corresponds to a valid capture group.",
  "Contents before match": "Contents before match",
  "This will return a portion of the source string that precedes the match.": "This will return a portion of the source string that precedes the match.",
  "Contents after match": "Contents after match",
  "This will return a portion of the source string that follows the match.": "This will return a portion of the source string that follows the match.",
  "Contents in capture group `foo`": "Contents in capture group `foo`",
  "This will return a string with the contents from the capture group named `foo`. Any name can be used as long as it is defined in the regex. This syntax is made up and specific to only Regex101. If the J-flag is specified, content will be taken from the first capture group with the same name.": "This will return a string with the contents from the capture group named `foo`. Any name can be used as long as it is defined in the regex. This syntax is made up and specific to only Regex101. If the J-flag is specified, content will be taken from the first capture group with the same name.",
  "This will return a string with the contents from the capture group named `foo`. Any name can be used as long as it is defined in the regex. If the J-flag is specified, content will be taken from the first capture group with the same name.": "This will return a string with the contents from the capture group named `foo`. Any name can be used as long as it is defined in the regex. If the J-flag is specified, content will be taken from the first capture group with the same name.",
  "Hexadecimal replacement values": "Hexadecimal replacement values",
  "You can use hexadecimals to insert any character into the replacement string using the standard syntax.": "You can use hexadecimals to insert any character into the replacement string using the standard syntax.",
  "Insert a tab character.": "Insert a tab character.",
  "Insert a carriage return character.": "Insert a carriage return character.",
  "Insert a newline character.": "Insert a newline character.",
  "Form-feed": "Form-feed",
  "Insert a form-feed character.": "Insert a form-feed character.",
  "Atomic Group": "Atomic Group",
  "{1} Capturing Group": "{1} Capturing Group",
  "If Clause": "If Clause",
  "Definition Construct": "Definition Construct",
  "May only be used to make definitions": "May only be used to make definitions",
  "Non-capturing Group (with inline modifiers)": "Non-capturing Group (with inline modifiers)",
  "Named Capturing Group": "Named Capturing Group",
  "Negative Lookahead": "Negative Lookahead",
  "Assert that the Regex below does not match": "Assert that the Regex below does not match",
  "Negative Lookbehind": "Negative Lookbehind",
  "Non-capturing Group": "Non-capturing Group",
  "Positive Lookahead": "Positive Lookahead",
  "Assert that the Regex below matches": "Assert that the Regex below matches",
  "Positive Lookbehind": "Positive Lookbehind",
  "Duplicate Subpattern Group": "Duplicate Subpattern Group",
  "Subpatterns declared within each alternative of this construct will start over from the same index": "Subpatterns declared within each alternative of this construct will start over from the same index",
  "You have added anything to your favorites yet.": "You have added anything to your favourites yet.",
  "charactler class missing closing bracket": "charactler class missing closing bracket",
  "pattern may not end in with a trailing backslash": "pattern may not end in with a trailing backslash",
  "There was a problem when trying to det the details for this entry. Please try again later.": "There was a problem when trying to det the details for this entry. Please try again later."
}
